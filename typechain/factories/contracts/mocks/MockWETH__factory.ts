/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockWETH,
  MockWETHInterface,
} from "../../../contracts/mocks/MockWETH";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a9b38038062001a9b83398181016040528101906200003791906200014f565b818181600390816200004a91906200027a565b5080600490816200005c91906200027a565b5050506200007b67fd639e35ddfd1dc160c01b6200008360201b60201c565b505062000353565b50565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000ae57600080fd5b815160018060401b0380821115620000cb57620000ca62000086565b5b601f1960405181603f83601f8701160116810191508082108383111715620000f857620000f762000086565b5b816040528381526020925086838588010111156200011557600080fd5b600091505b838210156200013a5782828701015183838301015282820191506200011a565b60008385830101528094505050505092915050565b600080604083850312156200016357600080fd5b825160018060401b03808211156200017a57600080fd5b62000188868387016200009c565b935060208501519150808211156200019f57600080fd5b50620001ae858286016200009c565b9150509250929050565b60008160011c90506001821680620001d157607f821691505b602082108103620001f257634e487b7160e01b600052602260045260246000fd5b50919050565b806000525060006020600020905090565b601f8211156200025b57600081815260208120601f850160051c8101602086101562000233578190505b601f850160051c820191505b8181101562000257578281556001810190506200023f565b5050505b505050565b60008260011b6000198460031b1c19831617905092915050565b815160018060401b0381111562000296576200029562000086565b5b620002ae81620002a78454620001b8565b8462000209565b60006020809150601f831160018114620002e75760008415620002d2578387015190505b620002de858262000260565b8655506200034b565b601f198416620002f786620001f8565b60005b828110156200031f5785890151825560018201915084860195508481019050620002fa565b50858210156200033f578488015160001960f88860031b161c1981168255505b505060018460011b0185555b505050505050565b61173880620003636000396000f3fe6080604052600436106100c65760003560e01c8063395093511161007f578063a457c2d711610059578063a457c2d7146102b7578063a9059cbb146102f4578063d0e30db014610331578063dd62ed3e1461033b576100e9565b8063395093511461021257806370a082311461024f57806395d89b411461028c576100e9565b806306fdde03146100ee578063095ea7b31461011957806318160ddd1461015657806323b872dd146101815780632e1a7d4d146101be578063313ce567146101e7576100e9565b366100e9576100df67f18236f672956a8760c01b610378565b6100e761037b565b005b600080fd5b3480156100fa57600080fd5b506101036103c3565b60405161011091906110f5565b60405180910390f35b34801561012557600080fd5b50610140600480360381019061013b9190611165565b610455565b60405161014d9190611191565b60405180910390f35b34801561016257600080fd5b5061016b610478565b60405161017891906111a4565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a391906111b5565b610482565b6040516101b59190611191565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e091906111f1565b6104b1565b005b3480156101f357600080fd5b506101fc6106ba565b604051610209919061120d565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190611165565b6106c3565b6040516102469190611191565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190611221565b6106fa565b60405161028391906111a4565b60405180910390f35b34801561029857600080fd5b506102a1610742565b6040516102ae91906110f5565b60405180910390f35b3480156102c357600080fd5b506102de60048036038101906102d99190611165565b6107d4565b6040516102eb9190611191565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190611165565b61084b565b6040516103289190611191565b60405180910390f35b61033961037b565b005b34801561034757600080fd5b50610362600480360381019061035d9190611244565b61086e565b60405161036f91906111a4565b60405180910390f35b50565b61038f671daf871b12f6198960c01b610378565b6103a367f1053e2a2a9f796760c01b610378565b6103b767eb98502fc9eafa6360c01b610378565b6103c133346108f5565b565b6060600380546103d290611277565b80601f01602080910402602001604051908101604052809291908181526020018280546103fe90611277565b801561044b5780601f106104205761010080835404028352916020019161044b565b820191906000526020600020905b81548152906001019060200180831161042e57829003601f168201915b5050505050905090565b600080610460610a4b565b905061046d818585610a53565b600191505092915050565b6000600254905090565b60008061048d610a4b565b905061049a858285610c1c565b6104a5858585610ca8565b60019150509392505050565b6104c567b0ca05c4cf1376ea60c01b610378565b6104d96767f0b662e4324d3260c01b610378565b6104ed675115d280bfb7ef5160c01b610378565b61050167bfd76b78cc085cae60c01b610378565b8061050b336106fa565b101561054c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610543906112b5565b60405180910390fd5b61056067266d83ffb134c34b60c01b610378565b610574670c39e2cd877fb4eb60c01b610378565b61058867eafded08de76099a60c01b610378565b6105923382610f1e565b6105a6675a26a4977edd78ac60c01b610378565b6105ba67cff6330d6b8872f060c01b610378565b60003373ffffffffffffffffffffffffffffffffffffffff16826040516105e0906112f3565b60006040518083038185875af1925050503d806000811461061d576040519150601f19603f3d011682016040523d82523d6000602084013e610622565b606091505b5050905061063a6732215142c69dfdb260c01b610378565b61064e67d00344c0bfe2cdad60c01b610378565b6106626786fad61c18ca12de60c01b610378565b806106a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610699906112fd565b60405180910390fd5b6106b667fab4e09801b881e960c01b610378565b5050565b60006012905090565b6000806106ce610a4b565b90506106ef8185856106e0858961086e565b6106ea919061133b565b610a53565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461075190611277565b80601f016020809104026020016040519081016040528092919081815260200182805461077d90611277565b80156107ca5780601f1061079f576101008083540402835291602001916107ca565b820191906000526020600020905b8154815290600101906020018083116107ad57829003601f168201915b5050505050905090565b6000806107df610a4b565b905060006107ed828661086e565b905083811015610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611366565b60405180910390fd5b61083f8286868403610a53565b60019250505092915050565b600080610856610a4b565b9050610863818585610ca8565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b906113ca565b60405180910390fd5b610970600083836110eb565b8060026000828254610982919061133b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a3391906111a4565b60405180910390a3610a47600083836110f0565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990611408565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b289061146c565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c0f91906111a4565b60405180910390a3505050565b6000610c28848461086e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ca25781811015610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b906114d0565b60405180910390fd5b610ca18484848403610a53565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0e9061150e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7d90611572565b60405180910390fd5b610d918383836110eb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e906115d6565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f0591906111a4565b60405180910390a3610f188484846110f0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f849061163a565b60405180910390fd5b610f99826000836110eb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561101f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110169061169e565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110d291906111a4565b60405180910390a36110e6836000846110f0565b505050565b505050565b505050565b600060208083528351808285015260005b8181101561112557828187010151604082870101528281019050611106565b506000604082860101526040601f19601f8301168501019250505092915050565b60008135905060018060a01b038116811461116057600080fd5b919050565b6000806040838503121561117857600080fd5b61118183611146565b9150602083013590509250929050565b6000602082019050821515825292915050565b600060208201905082825292915050565b6000806000606084860312156111ca57600080fd5b6111d384611146565b92506111e160208501611146565b9150604084013590509250925092565b60006020828403121561120357600080fd5b8135905092915050565b600060208201905060ff8316825292915050565b60006020828403121561123357600080fd5b61123c82611146565b905092915050565b6000806040838503121561125757600080fd5b61126083611146565b915061126e60208401611146565b90509250929050565b60008160011c9050600182168061128f57607f821691505b6020821081036112af57634e487b7160e01b600052602260045260246000fd5b50919050565b60208152601e60208201527f4d6f636b574554483a20696e73756666696369656e742062616c616e6365000060408201526000606082019050919050565b6000819050919050565b60208152601d60208201527f4d6f636b574554483a20455448207472616e73666572206661696c656400000060408201526000606082019050919050565b600082820190508082111561136057634e487b7160e01b600052601160045260246000fd5b92915050565b60208152602560208201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f00000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601f60208201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060408201526000606082019050919050565b60208152602460208201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f726573730000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602260208201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f737300000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601d60208201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060408201526000606082019050919050565b60208152602560208201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f647265737300000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602360208201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f657373000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602660208201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602160208201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f730000000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602260208201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60408201527f63650000000000000000000000000000000000000000000000000000000000006060820152600060808201905091905056fea26469706673582212202dc9865d83072b63c3b0c90b98fdab115a4fdb00640aad762abff5cfe840df5564736f6c63430008130033";

type MockWETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWETH__factory extends ContractFactory {
  constructor(...args: MockWETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockWETH> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockWETH>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MockWETH {
    return super.attach(address) as MockWETH;
  }
  override connect(signer: Signer): MockWETH__factory {
    return super.connect(signer) as MockWETH__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWETHInterface {
    return new utils.Interface(_abi) as MockWETHInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWETH {
    return new Contract(address, _abi, signerOrProvider) as MockWETH;
  }
}
