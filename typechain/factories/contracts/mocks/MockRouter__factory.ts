/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d27806100206000396000f3fe6080604052600436106100745760003560e01c80639957f9341161004e5780639957f934146100e8578063a48a905814610108578063f9d53aeb14610142578063fbca3b741461015557600080fd5b806320487ded1461008057806385572ffb146100b357806396f4e9f9146100d557600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610824565b610182565b6040519081526020015b60405180910390f35b3480156100bf57600080fd5b506100d36100ce3660046109ce565b6101e6565b005b6100a06100e3366004610824565b61023e565b3480156100f457600080fd5b506100d3610103366004610a02565b61036c565b34801561011457600080fd5b50610132610123366004610a4f565b6001600160401b031660891490565b60405190151581526020016100aa565b6100a0610150366004610a71565b6104ac565b34801561016157600080fd5b50610175610170366004610a4f565b6105e5565b6040516100aa9190610a9b565b6000826001600160401b03166089146101d65760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5067016345785d8a000092915050565b6040516385572ffb60e01b815233906385572ffb90610209908490600401610b7d565b600060405180830381600087803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b5050505050565b6000826001600160401b03166089146102925760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b60448201526064016101cd565b81516000906102a090610bfb565b60601c9050600083602001518060200190518101906102bf9190610c37565b604080516001600160401b03881681526001600160a01b03851660208201529081018290529091507f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6969060600160405180910390a1604080514260208083019190915233606090811b6bffffffffffffffffffffffff199081168486015295901b909416605482015260688082019390935281518082039093018352608801905280519101209392505050565b80602001516001600160401b0316608a146103c05760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b29031b430b4b760611b60448201526064016101cd565b6001600160a01b03821661040f5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064016101cd565b6040805160a081018252825181526020808401516001600160401b0316908201528282015181830152606080840151908201526080808401519082015290516385572ffb60e01b81526001600160a01b038416916385572ffb916104769190600401610b7d565b600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050505050565b6040805160a081019091526001600160a01b03831660c082015260009081908060e081016040516020818303038152906040528152602001846040516020016104f791815260200190565b60408051601f198184030181529190528152602001600060405190808252806020026020018201604052801561055357816020015b604080518082019091526000808252602082015281526020019060019003908161052c5790505b5081526000602080830182905260408051918201815291815291810191909152516396f4e9f960e01b815290915030906396f4e9f99061059a906089908590600401610c50565b6020604051808303816000875af11580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610c37565b949350505050565b6060816001600160401b03166089146106345760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064016101cd565b505060408051600081526020810190915290565b80356001600160401b038116811461065f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561069c5761069c610664565b60405290565b60405160a081016001600160401b038111828210171561069c5761069c610664565b604051601f8201601f191681016001600160401b03811182821017156106ec576106ec610664565b604052919050565b600082601f83011261070557600080fd5b81356001600160401b0381111561071e5761071e610664565b610731601f8201601f19166020016106c4565b81815284602083860101111561074657600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461065f57600080fd5b600082601f83011261078b57600080fd5b813560206001600160401b038211156107a6576107a6610664565b6107b4818360051b016106c4565b82815260069290921b840181019181810190868411156107d357600080fd5b8286015b8481101561081957604081890312156107f05760008081fd5b6107f861067a565b61080182610763565b815281850135858201528352918301916040016107d7565b509695505050505050565b6000806040838503121561083757600080fd5b61084083610648565b915060208301356001600160401b038082111561085c57600080fd5b9084019060a0828703121561087057600080fd5b6108786106a2565b82358281111561088757600080fd5b610893888286016106f4565b8252506020830135828111156108a857600080fd5b6108b4888286016106f4565b6020830152506040830135828111156108cc57600080fd5b6108d88882860161077a565b6040830152506108ea60608401610763565b606082015260808301358281111561090157600080fd5b61090d888286016106f4565b6080830152508093505050509250929050565b600060a0828403121561093257600080fd5b61093a6106a2565b90508135815261094c60208301610648565b602082015260408201356001600160401b038082111561096b57600080fd5b610977858386016106f4565b6040840152606084013591508082111561099057600080fd5b61099c858386016106f4565b606084015260808401359150808211156109b557600080fd5b506109c28482850161077a565b60808301525092915050565b6000602082840312156109e057600080fd5b81356001600160401b038111156109f657600080fd5b6105dd84828501610920565b60008060408385031215610a1557600080fd5b610a1e83610763565b915060208301356001600160401b03811115610a3957600080fd5b610a4585828601610920565b9150509250929050565b600060208284031215610a6157600080fd5b610a6a82610648565b9392505050565b60008060408385031215610a8457600080fd5b610a8d83610763565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610adc5783516001600160a01b031683529284019291840191600101610ab7565b50909695505050505050565b6000815180845260005b81811015610b0e57602081850181015186830182015201610af2565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015610b7257815180516001600160a01b031688528301518388015260409096019590820190600101610b42565b509495945050505050565b60208152815160208201526001600160401b0360208301511660408201526000604083015160a06060840152610bb660c0840182610ae8565b90506060840151601f1980858403016080860152610bd48383610ae8565b925060808601519150808584030160a086015250610bf28282610b2e565b95945050505050565b805160208201516bffffffffffffffffffffffff198082169291906014831015610c2f5780818460140360031b1b83161693505b505050919050565b600060208284031215610c4957600080fd5b5051919050565b6001600160401b0383168152604060208201526000825160a06040840152610c7b60e0840182610ae8565b90506020840151603f1980858403016060860152610c998383610ae8565b92506040860151915080858403016080860152610cb68383610b2e565b60608701516001600160a01b031660a0870152608087015186820390920160c087015292509050610ce78282610ae8565b969550505050505056fea2646970667358221220f07222bc16676cdffb471b23006260e1bed34a3be7fb7b55b0ca2c84ebb9e53a64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
