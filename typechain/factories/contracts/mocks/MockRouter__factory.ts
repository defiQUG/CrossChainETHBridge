/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "validateMessage",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e9f806100206000396000f3fe60806040526004361061007f5760003560e01c80639957f9341161004e5780639957f93414610123578063a48a905814610143578063f9d53aeb1461016d578063fbca3b741461018057600080fd5b806320487ded1461008b578063582311f7146100be57806385572ffb146100ee57806396f4e9f91461011057600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a636600461091c565b6101ad565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100de6100d9366004610ac6565b610211565b60405190151581526020016100b5565b3480156100fa57600080fd5b5061010e610109366004610ac6565b6102d9565b005b6100ab61011e36600461091c565b610364565b34801561012f57600080fd5b5061010e61013e366004610afa565b61043c565b34801561014f57600080fd5b506100de61015e366004610b49565b6001600160401b031660891490565b6100ab61017b366004610b6b565b610596565b34801561018c57600080fd5b506101a061019b366004610b49565b6106cf565b6040516100b59190610b97565b6000826001600160401b03166089146102015760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5067016345785d8a000092915050565b600081602001516001600160401b03166000036102695760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b60448201526064016101f8565b600082606001518060200190518101906102839190610be4565b5090506001600160a01b0381166102d05760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016101f8565b50600192915050565b6102e281610211565b6103205760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206d65737361676560881b60448201526064016101f8565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed81602001518260600151604051610359929190610c58565b60405180910390a150565b6000826001600160401b03166000036103b85760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b60448201526064016101f8565b81516020808401516040808601516080870151606088015192516000966103e3969095949101610cc9565b60405160208183030381529060405290507f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed8482604051610425929190610c58565b60405180910390a180516020909101209392505050565b80602001516001600160401b0316608a146104905760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b29031b430b4b760611b60448201526064016101f8565b6001600160a01b0382166104df5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064016101f8565b6104e881610211565b6105345760405162461bcd60e51b815260206004820152601960248201527f4d6573736167652076616c69646174696f6e206661696c65640000000000000060448201526064016101f8565b6040516385572ffb60e01b81526001600160a01b038316906385572ffb90610560908490600401610d31565b600060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b505050505050565b6040805160a081019091526001600160a01b03831660c082015260009081908060e081016040516020818303038152906040528152602001846040516020016105e191815260200190565b60408051601f198184030181529190528152602001600060405190808252806020026020018201604052801561063d57816020015b60408051808201909152600080825260208201528152602001906001900390816106165790505b5081526000602080830182905260408051918201815291815291810191909152516396f4e9f960e01b815290915030906396f4e9f990610684906089908590600401610daf565b6020604051808303816000875af11580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190610e50565b949350505050565b6060816001600160401b031660891461071e5760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064016101f8565b505060408051600081526020810190915290565b80356001600160401b038116811461074957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156107865761078661074e565b60405290565b60405160a081016001600160401b03811182821017156107865761078661074e565b604051601f8201601f191681016001600160401b03811182821017156107d6576107d661074e565b604052919050565b600082601f8301126107ef57600080fd5b81356001600160401b038111156108085761080861074e565b61081b601f8201601f19166020016107ae565b81815284602083860101111561083057600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461086257600080fd5b50565b80356107498161084d565b600082601f83011261088157600080fd5b813560206001600160401b0382111561089c5761089c61074e565b6108aa818360051b016107ae565b82815260069290921b840181019181810190868411156108c957600080fd5b8286015b8481101561091157604081890312156108e65760008081fd5b6108ee610764565b81356108f98161084d565b815281850135858201528352918301916040016108cd565b509695505050505050565b6000806040838503121561092f57600080fd5b61093883610732565b915060208301356001600160401b038082111561095457600080fd5b9084019060a0828703121561096857600080fd5b61097061078c565b82358281111561097f57600080fd5b61098b888286016107de565b8252506020830135828111156109a057600080fd5b6109ac888286016107de565b6020830152506040830135828111156109c457600080fd5b6109d088828601610870565b6040830152506109e260608401610865565b60608201526080830135828111156109f957600080fd5b610a05888286016107de565b6080830152508093505050509250929050565b600060a08284031215610a2a57600080fd5b610a3261078c565b905081358152610a4460208301610732565b602082015260408201356001600160401b0380821115610a6357600080fd5b610a6f858386016107de565b60408401526060840135915080821115610a8857600080fd5b610a94858386016107de565b60608401526080840135915080821115610aad57600080fd5b50610aba84828501610870565b60808301525092915050565b600060208284031215610ad857600080fd5b81356001600160401b03811115610aee57600080fd5b6106c784828501610a18565b60008060408385031215610b0d57600080fd5b8235610b188161084d565b915060208301356001600160401b03811115610b3357600080fd5b610b3f85828601610a18565b9150509250929050565b600060208284031215610b5b57600080fd5b610b6482610732565b9392505050565b60008060408385031215610b7e57600080fd5b8235610b898161084d565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610bd85783516001600160a01b031683529284019291840191600101610bb3565b50909695505050505050565b60008060408385031215610bf757600080fd5b8251610c028161084d565b6020939093015192949293505050565b6000815180845260005b81811015610c3857602081850181015186830182015201610c1c565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160401b03831681526040602082015260006106c76040830184610c12565b600081518084526020808501945080840160005b83811015610cbe57815180516001600160a01b031688528301518388015260409096019590820190600101610c8e565b509495945050505050565b60a081526000610cdc60a0830188610c12565b8281036020840152610cee8188610c12565b90508281036040840152610d028187610c7a565b90508281036060840152610d168186610c12565b91505060018060a01b03831660808301529695505050505050565b60208152815160208201526001600160401b0360208301511660408201526000604083015160a06060840152610d6a60c0840182610c12565b90506060840151601f1980858403016080860152610d888383610c12565b925060808601519150808584030160a086015250610da68282610c7a565b95945050505050565b6001600160401b0383168152604060208201526000825160a06040840152610dda60e0840182610c12565b90506020840151603f1980858403016060860152610df88383610c12565b92506040860151915080858403016080860152610e158383610c7a565b60608701516001600160a01b031660a0870152608087015186820390920160c087015292509050610e468282610c12565b9695505050505050565b600060208284031215610e6257600080fd5b505191905056fea2646970667358221220eeb94aa079010eba01cecf521761f7b21390a3850cad747ab050e6465cfc176464736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
