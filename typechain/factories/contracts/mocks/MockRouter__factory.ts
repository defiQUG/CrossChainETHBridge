/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109f9806100206000396000f3fe6080604052600436106100595760003560e01c806320487ded146100655780638a8a8f68146100a25780638da040d5146100c457806396f4e9f9146100e4578063a48a9058146100f7578063fbca3b741461013257600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061008f6100803660046105f3565b67016345785d8a000092915050565b6040519081526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd3660046106f0565b61016d565b005b3480156100d057600080fd5b506100c26100df3660046107c0565b6101cf565b61008f6100f23660046105f3565b6102e2565b34801561010357600080fd5b50610122610112366004610804565b67ffffffffffffffff1660891490565b6040519015158152602001610099565b34801561013e57600080fd5b5061016061014d366004610804565b5060408051600081526020810190915290565b6040516100999190610826565b6040516385572ffb60e01b81526001600160a01b038316906385572ffb906101999084906004016108b9565b600060405180830381600087803b1580156101b357600080fd5b505af11580156101c7573d6000803e3d6000fd5b505050505050565b60408051606084901b6001600160601b0319166020820152815160148183030181526000603483018181526054909301909352919081610231565b604080518082019091526000808252602082015281526020019060019003908161020a5790505b50905060008360405160200161024991815260200190565b60408051601f1981840301815260a083018252888352608a6020840152828201869052606083018190526080830185905290516385572ffb60e01b81529092506001600160a01b038916916385572ffb916102a791906004016108b9565b600060405180830381600087803b1580156102c157600080fd5b505af11580156102d5573d6000803e3d6000fd5b5050505050505050505050565b60008267ffffffffffffffff1660891461033b5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b604482015260640160405180910390fd5b815160009061034990610973565b60601c90506000836020015180602001905181019061036891906109aa565b6040805167ffffffffffffffff881681526001600160a01b03851660208201529081018290529091507f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6969060600160405180910390a1604080514260208083019190915233606090811b6001600160601b03199081168486015295901b909416605482015260688082019390935281518082039093018352608801905280519101209392505050565b803567ffffffffffffffff8116811461042957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156104675761046761042e565b60405290565b60405160a0810167ffffffffffffffff811182821017156104675761046761042e565b604051601f8201601f1916810167ffffffffffffffff811182821017156104b9576104b961042e565b604052919050565b600082601f8301126104d257600080fd5b813567ffffffffffffffff8111156104ec576104ec61042e565b6104ff601f8201601f1916602001610490565b81815284602083860101111561051457600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461042957600080fd5b600082601f83011261055957600080fd5b8135602067ffffffffffffffff8211156105755761057561042e565b610583818360051b01610490565b82815260069290921b840181019181810190868411156105a257600080fd5b8286015b848110156105e857604081890312156105bf5760008081fd5b6105c7610444565b6105d082610531565b815281850135858201528352918301916040016105a6565b509695505050505050565b6000806040838503121561060657600080fd5b61060f83610411565b9150602083013567ffffffffffffffff8082111561062c57600080fd5b9084019060a0828703121561064057600080fd5b61064861046d565b82358281111561065757600080fd5b610663888286016104c1565b82525060208301358281111561067857600080fd5b610684888286016104c1565b60208301525060408301358281111561069c57600080fd5b6106a888828601610548565b6040830152506106ba60608401610531565b60608201526080830135828111156106d157600080fd5b6106dd888286016104c1565b6080830152508093505050509250929050565b6000806040838503121561070357600080fd5b61070c83610531565b9150602083013567ffffffffffffffff8082111561072957600080fd5b9084019060a0828703121561073d57600080fd5b61074561046d565b8235815261075560208401610411565b602082015260408301358281111561076c57600080fd5b610778888286016104c1565b60408301525060608301358281111561079057600080fd5b61079c888286016104c1565b6060830152506080830135828111156107b457600080fd5b6106dd88828601610548565b600080600080608085870312156107d657600080fd5b6107df85610531565b9350602085013592506107f460408601610531565b9396929550929360600135925050565b60006020828403121561081657600080fd5b61081f82610411565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156108675783516001600160a01b031683529284019291840191600101610842565b50909695505050505050565b6000815180845260005b818110156108995760208185018101518683018201520161087d565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283518184015280840151604067ffffffffffffffff82168186015280860151915060a060608601526108f560c0860183610873565b91506060860151601f19808785030160808801526109138483610873565b608089015188820390920160a089015281518082529186019450600092508501905b8083101561096757845180516001600160a01b0316835286015186830152938501936001929092019190830190610935565b50979650505050505050565b805160208201516001600160601b031980821692919060148310156109a25780818460140360031b1b83161693505b505050919050565b6000602082840312156109bc57600080fd5b505191905056fea264697066735822122026f7f377d43f6b53534313a8a463f5a08b342eaecbdfc5dbdcfbe536448d9ff264736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
