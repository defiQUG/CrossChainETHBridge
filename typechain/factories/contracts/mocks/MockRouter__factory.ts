/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d6b806100206000396000f3fe6080604052600436106100745760003560e01c80639957f9341161004e5780639957f934146100e8578063a48a905814610108578063f9d53aeb14610142578063fbca3b741461015557600080fd5b806320487ded1461008057806385572ffb146100b357806396f4e9f9146100d557600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610836565b610182565b6040519081526020015b60405180910390f35b3480156100bf57600080fd5b506100d36100ce3660046109e0565b6101e6565b005b6100a06100e3366004610836565b61023e565b3480156100f457600080fd5b506100d3610103366004610a14565b610370565b34801561011457600080fd5b50610132610123366004610a63565b6001600160401b031660891490565b60405190151581526020016100aa565b6100a0610150366004610a85565b6104b0565b34801561016157600080fd5b50610175610170366004610a63565b6105e9565b6040516100aa9190610ab1565b6000826001600160401b03166089146101d65760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5067016345785d8a000092915050565b6040516385572ffb60e01b815233906385572ffb90610209908490600401610b93565b600060405180830381600087803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b5050505050565b6000826001600160401b03166089146102925760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b60448201526064016101cd565b81516000906102a090610c11565b60601c905060008084602001518060200190518101906102c09190610c4d565b604080516001600160401b038a1681526001600160a01b038716602082015290810182905291935091507f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6969060600160405180910390a1604080514260208083019190915233606090811b6bffffffffffffffffffffffff199081168486015295901b90941660548201526068808201939093528151808203909301835260880190528051910120949350505050565b80602001516001600160401b0316608a146103c45760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b29031b430b4b760611b60448201526064016101cd565b6001600160a01b0382166104135760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064016101cd565b6040805160a081018252825181526020808401516001600160401b0316908201528282015181830152606080840151908201526080808401519082015290516385572ffb60e01b81526001600160a01b038416916385572ffb9161047a9190600401610b93565b600060405180830381600087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050505050565b6040805160a081019091526001600160a01b03831660c082015260009081908060e081016040516020818303038152906040528152602001846040516020016104fb91815260200190565b60408051601f198184030181529190528152602001600060405190808252806020026020018201604052801561055757816020015b60408051808201909152600080825260208201528152602001906001900390816105305790505b5081526000602080830182905260408051918201815291815291810191909152516396f4e9f960e01b815290915030906396f4e9f99061059e906089908590600401610c7b565b6020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190610d1c565b949350505050565b6060816001600160401b03166089146106385760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064016101cd565b505060408051600081526020810190915290565b80356001600160401b038116811461066357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156106a0576106a0610668565b60405290565b60405160a081016001600160401b03811182821017156106a0576106a0610668565b604051601f8201601f191681016001600160401b03811182821017156106f0576106f0610668565b604052919050565b600082601f83011261070957600080fd5b81356001600160401b0381111561072257610722610668565b610735601f8201601f19166020016106c8565b81815284602083860101111561074a57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461077c57600080fd5b50565b803561066381610767565b600082601f83011261079b57600080fd5b813560206001600160401b038211156107b6576107b6610668565b6107c4818360051b016106c8565b82815260069290921b840181019181810190868411156107e357600080fd5b8286015b8481101561082b57604081890312156108005760008081fd5b61080861067e565b813561081381610767565b815281850135858201528352918301916040016107e7565b509695505050505050565b6000806040838503121561084957600080fd5b6108528361064c565b915060208301356001600160401b038082111561086e57600080fd5b9084019060a0828703121561088257600080fd5b61088a6106a6565b82358281111561089957600080fd5b6108a5888286016106f8565b8252506020830135828111156108ba57600080fd5b6108c6888286016106f8565b6020830152506040830135828111156108de57600080fd5b6108ea8882860161078a565b6040830152506108fc6060840161077f565b606082015260808301358281111561091357600080fd5b61091f888286016106f8565b6080830152508093505050509250929050565b600060a0828403121561094457600080fd5b61094c6106a6565b90508135815261095e6020830161064c565b602082015260408201356001600160401b038082111561097d57600080fd5b610989858386016106f8565b604084015260608401359150808211156109a257600080fd5b6109ae858386016106f8565b606084015260808401359150808211156109c757600080fd5b506109d48482850161078a565b60808301525092915050565b6000602082840312156109f257600080fd5b81356001600160401b03811115610a0857600080fd5b6105e184828501610932565b60008060408385031215610a2757600080fd5b8235610a3281610767565b915060208301356001600160401b03811115610a4d57600080fd5b610a5985828601610932565b9150509250929050565b600060208284031215610a7557600080fd5b610a7e8261064c565b9392505050565b60008060408385031215610a9857600080fd5b8235610aa381610767565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610af25783516001600160a01b031683529284019291840191600101610acd565b50909695505050505050565b6000815180845260005b81811015610b2457602081850181015186830182015201610b08565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015610b8857815180516001600160a01b031688528301518388015260409096019590820190600101610b58565b509495945050505050565b60208152815160208201526001600160401b0360208301511660408201526000604083015160a06060840152610bcc60c0840182610afe565b90506060840151601f1980858403016080860152610bea8383610afe565b925060808601519150808584030160a086015250610c088282610b44565b95945050505050565b805160208201516bffffffffffffffffffffffff198082169291906014831015610c455780818460140360031b1b83161693505b505050919050565b60008060408385031215610c6057600080fd5b8251610c6b81610767565b6020939093015192949293505050565b6001600160401b0383168152604060208201526000825160a06040840152610ca660e0840182610afe565b90506020840151603f1980858403016060860152610cc48383610afe565b92506040860151915080858403016080860152610ce18383610b44565b60608701516001600160a01b031660a0870152608087015186820390920160c087015292509050610d128282610afe565b9695505050505050565b600060208284031215610d2e57600080fd5b505191905056fea26469706673582212205e63bebcfbfa401e0889633a2166a8890c4f9d44f859621dbccc61af4730f39d64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
