/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d0b806100206000396000f3fe6080604052600436106100745760003560e01c80639957f9341161004e5780639957f934146100e8578063a48a905814610108578063f9d53aeb14610142578063fbca3b741461015557600080fd5b806320487ded1461008057806385572ffb146100b357806396f4e9f9146100d557600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b3660046107ba565b610182565b6040519081526020015b60405180910390f35b3480156100bf57600080fd5b506100d36100ce366004610964565b6101e6565b005b6100a06100e33660046107ba565b61022a565b3480156100f457600080fd5b506100d3610103366004610998565b610302565b34801561011457600080fd5b506101326101233660046109e5565b6001600160401b031660891490565b60405190151581526020016100aa565b6100a0610150366004610a07565b610442565b34801561016157600080fd5b506101756101703660046109e5565b61057b565b6040516100aa9190610a31565b6000826001600160401b03166089146101d65760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5067016345785d8a000092915050565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed8160200151826060015160405161021f929190610ac4565b60405180910390a150565b6000826001600160401b031660000361027e5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b60448201526064016101cd565b81516020808401516040808601516080870151606088015192516000966102a9969095949101610b35565b60405160208183030381529060405290507f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed84826040516102eb929190610ac4565b60405180910390a180516020909101209392505050565b80602001516001600160401b0316608a146103565760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b29031b430b4b760611b60448201526064016101cd565b6001600160a01b0382166103a55760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064016101cd565b6040805160a081018252825181526020808401516001600160401b0316908201528282015181830152606080840151908201526080808401519082015290516385572ffb60e01b81526001600160a01b038416916385572ffb9161040c9190600401610b9d565b600060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050505050565b6040805160a081019091526001600160a01b03831660c082015260009081908060e0810160405160208183030381529060405281526020018460405160200161048d91815260200190565b60408051601f19818403018152919052815260200160006040519080825280602002602001820160405280156104e957816020015b60408051808201909152600080825260208201528152602001906001900390816104c25790505b5081526000602080830182905260408051918201815291815291810191909152516396f4e9f960e01b815290915030906396f4e9f990610530906089908590600401610c1b565b6020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190610cbc565b949350505050565b6060816001600160401b03166089146105ca5760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064016101cd565b505060408051600081526020810190915290565b80356001600160401b03811681146105f557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715610632576106326105fa565b60405290565b60405160a081016001600160401b0381118282101715610632576106326105fa565b604051601f8201601f191681016001600160401b0381118282101715610682576106826105fa565b604052919050565b600082601f83011261069b57600080fd5b81356001600160401b038111156106b4576106b46105fa565b6106c7601f8201601f191660200161065a565b8181528460208386010111156106dc57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b03811681146105f557600080fd5b600082601f83011261072157600080fd5b813560206001600160401b0382111561073c5761073c6105fa565b61074a818360051b0161065a565b82815260069290921b8401810191818101908684111561076957600080fd5b8286015b848110156107af57604081890312156107865760008081fd5b61078e610610565b610797826106f9565b8152818501358582015283529183019160400161076d565b509695505050505050565b600080604083850312156107cd57600080fd5b6107d6836105de565b915060208301356001600160401b03808211156107f257600080fd5b9084019060a0828703121561080657600080fd5b61080e610638565b82358281111561081d57600080fd5b6108298882860161068a565b82525060208301358281111561083e57600080fd5b61084a8882860161068a565b60208301525060408301358281111561086257600080fd5b61086e88828601610710565b604083015250610880606084016106f9565b606082015260808301358281111561089757600080fd5b6108a38882860161068a565b6080830152508093505050509250929050565b600060a082840312156108c857600080fd5b6108d0610638565b9050813581526108e2602083016105de565b602082015260408201356001600160401b038082111561090157600080fd5b61090d8583860161068a565b6040840152606084013591508082111561092657600080fd5b6109328583860161068a565b6060840152608084013591508082111561094b57600080fd5b5061095884828501610710565b60808301525092915050565b60006020828403121561097657600080fd5b81356001600160401b0381111561098c57600080fd5b610573848285016108b6565b600080604083850312156109ab57600080fd5b6109b4836106f9565b915060208301356001600160401b038111156109cf57600080fd5b6109db858286016108b6565b9150509250929050565b6000602082840312156109f757600080fd5b610a00826105de565b9392505050565b60008060408385031215610a1a57600080fd5b610a23836106f9565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610a725783516001600160a01b031683529284019291840191600101610a4d565b50909695505050505050565b6000815180845260005b81811015610aa457602081850181015186830182015201610a88565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160401b03831681526040602082015260006105736040830184610a7e565b600081518084526020808501945080840160005b83811015610b2a57815180516001600160a01b031688528301518388015260409096019590820190600101610afa565b509495945050505050565b60a081526000610b4860a0830188610a7e565b8281036020840152610b5a8188610a7e565b90508281036040840152610b6e8187610ae6565b90508281036060840152610b828186610a7e565b91505060018060a01b03831660808301529695505050505050565b60208152815160208201526001600160401b0360208301511660408201526000604083015160a06060840152610bd660c0840182610a7e565b90506060840151601f1980858403016080860152610bf48383610a7e565b925060808601519150808584030160a086015250610c128282610ae6565b95945050505050565b6001600160401b0383168152604060208201526000825160a06040840152610c4660e0840182610a7e565b90506020840151603f1980858403016060860152610c648383610a7e565b92506040860151915080858403016080860152610c818383610ae6565b60608701516001600160a01b031660a0870152608087015186820390920160c087015292509050610cb28282610a7e565b9695505050505050565b600060208284031215610cce57600080fd5b505191905056fea2646970667358221220a2af0d4c4ff126901893fd4eb72b38a253b4e35309b56387a72825d7beb968d264736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
