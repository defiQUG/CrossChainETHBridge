/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506113ec806100206000396000f3fe6080604052600436106100745760003560e01c80639957f9341161004e5780639957f93414610116578063a48a90581461013f578063f9d53aeb1461017c578063fbca3b74146101ac5761007b565b806320487ded1461008057806385572ffb146100bd57806396f4e9f9146100e65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610d1f565b6101e9565b6040516100b49190610e1d565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610edd565b6102d5565b005b61010060048036038101906100fb9190610d1f565b610355565b60405161010d9190610f1b565b60405180910390f35b34801561012257600080fd5b5061013d60048036038101906101389190610f2c565b61050a565b005b34801561014b57600080fd5b5061016660048036038101906101619190610f7a565b610759565b6040516101739190610f9d565b60405180910390f35b61019660048036038101906101919190610fb0565b6107ac565b6040516101a39190610f1b565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190610f7a565b61097d565b6040516101e09190610fdc565b60405180910390f35b60006101ff678066ea369496750d60c01b610ad6565b610213679ced87754696381860c01b610ad6565b61022767e7ff52379fd4a8f060c01b610ad6565b61023b6729cd57bfd6a4d35d60c01b610ad6565b60898367ffffffffffffffff1614610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90611031565b60405180910390fd5b61029c67e4eefaf246743f6460c01b610ad6565b6102b067d7e0464d17366db860c01b610ad6565b6102c467d7c66fb5e1c14fa260c01b610ad6565b67016345785d8a0000905092915050565b6102e96751e4459bcfdffa4c60c01b610ad6565b6102fd670d558edcbcf39d9360c01b610ad6565b610311678f0aaceb9dbc91b260c01b610ad6565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed8160200151826060015160405161034a9291906110bb565b60405180910390a150565b600061036b67e39ee93607d37f7a60c01b610ad6565b61037f67a8d672c69e40032f60c01b610ad6565b610393678d8ada60f238c77b60c01b610ad6565b6103a76706017076bc5fc58460c01b610ad6565b60008367ffffffffffffffff16036103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb906110e7565b60405180910390fd5b61040867fe79f5b9f99ac64060c01b610ad6565b61041c6705a478aec67f131360c01b610ad6565b6104306740fd67f155d87ee760c01b610ad6565b60008260000151836020015184604001518560800151866060015160405160200161045f95949392919061117b565b60405160208183030381529060405290506104846797b0b38f1f2f2b3460c01b610ad6565b61049867bdcb261ddebbc01e60c01b610ad6565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed84826040516104c99291906110bb565b60405180910390a16104e567269995a5a607109d60c01b610ad6565b6104f9674493bfa77f59ce9f60c01b610ad6565b808051906020012091505092915050565b61051e67b01ca0a33f8edbfd60c01b610ad6565b6105326702bb37263916bef660c01b610ad6565b61054667dbc287ebaa72e2b560c01b610ad6565b61055a67c97f13ede8a3a64360c01b610ad6565b608a816020015167ffffffffffffffff16146105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a2906111e3565b60405180910390fd5b6105bf67c4b7b53f5ebd1a5c60c01b610ad6565b6105d367a791e253db6bf3c860c01b610ad6565b6105e767c523f73f44fd36ca60c01b610ad6565b6105fb676e55133f58320b8660c01b610ad6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066190611221565b60405180910390fd5b61067e674854b16d502c035b60c01b610ad6565b61069267f65d5504356507c660c01b610ad6565b6106a66710c745e4e5e3a0f160c01b610ad6565b8173ffffffffffffffffffffffffffffffffffffffff166385572ffb6040518060a0016040528084600001518152602001846020015167ffffffffffffffff168152602001846040015181526020018460600151815260200184608001518152506040518263ffffffff1660e01b8152600401610723919061125f565b600060405180830381600087803b15801561073d57600080fd5b505af1158015610751573d6000803e3d6000fd5b505050505050565b600061076f675280f7d02460f2ef60c01b610ad6565b6107836773fd95bb522a1b7260c01b610ad6565b610797675ef6624230af410c60c01b610ad6565b60898267ffffffffffffffff16149050919050565b60006107c267992865fb48f7cb8960c01b610ad6565b6107d667d4f336f37f5035a860c01b610ad6565b6107ea67ecdc2e75ea2a8c2a60c01b610ad6565b60006040518060a001604052808560405160200161080891906112df565b60405160208183030381529060405281526020018460405160200161082d9190610e1d565b6040516020818303038152906040528152602001600067ffffffffffffffff81111561085c5761085b610b2a565b5b60405190808252806020026020018201604052801561089557816020015b610882610ad9565b81526020019060019003908161087a5790505b508152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016040518060200160405280600081525081525090506108e16721340d8ff4f296a560c01b610ad6565b6108f567caea21dc7c536d9e60c01b610ad6565b3073ffffffffffffffffffffffffffffffffffffffff166396f4e9f96089836040518363ffffffff1660e01b81526004016109319291906112f8565b6020604051808303816000875af1158015610950573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610974919061139a565b91505092915050565b606061099367a88a9cb2473e08b460c01b610ad6565b6109a76737cdcfcc7d8e400160c01b610ad6565b6109bb673b8bd778e4e50bb960c01b610ad6565b6109cf671d51aa1cb8b4cd9860c01b610ad6565b60898267ffffffffffffffff1614610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611031565b60405180910390fd5b610a30674cf5912eead04cd560c01b610ad6565b610a4467397ba2a9b843b6a360c01b610ad6565b610a5867e0a9cad2c4ad0f9360c01b610ad6565b60008067ffffffffffffffff811115610a7457610a73610b2a565b5b604051908082528060200260200182016040528015610aa25781602001602082028036833780820191505090505b509050610ab967c7341cae44ec60c260c01b610ad6565b610acd67207cea731875ff4e60c01b610ad6565b80915050919050565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905067ffffffffffffffff81168114610b2557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600060405190506040810181811067ffffffffffffffff82111715610b6857610b67610b2a565b5b806040525090565b6000604051905060a0810181811067ffffffffffffffff82111715610b9857610b97610b2a565b5b806040525090565b60006040519050601f19601f830116810181811067ffffffffffffffff82111715610bce57610bcd610b2a565b5b8060405250919050565b600082601f830112610be957600080fd5b813567ffffffffffffffff811115610c0457610c03610b2a565b5b610c176020601f19601f84011601610ba0565b818152846020838601011115610c2c57600080fd5b81602085016020830137600060208383010152809250505092915050565b60008135905060018060a01b0381168114610c6457600080fd5b919050565b600082601f830112610c7a57600080fd5b8135602067ffffffffffffffff821115610c9757610c96610b2a565b5b610ca5818360051b01610ba0565b808382528282019150828460061b870101935086841115610cc557600080fd5b8286015b84811015610d115760408189031215610ce25760008081fd5b610cea610b40565b610cf382610c4a565b81528482013585820152808452508383019250604081019050610cc9565b508094505050505092915050565b60008060408385031215610d3257600080fd5b610d3b83610b09565b9150602083013567ffffffffffffffff80821115610d5857600080fd5b818501915060a08287031215610d6d57600080fd5b610d75610b70565b823582811115610d8457600080fd5b610d9088828601610bd8565b825250602083013582811115610da557600080fd5b610db188828601610bd8565b602083015250604083013582811115610dc957600080fd5b610dd588828601610c69565b604083015250610de760608401610c4a565b6060820152608083013582811115610dfe57600080fd5b610e0a88828601610bd8565b6080830152508093505050509250929050565b600060208201905082825292915050565b600060a08284031215610e4057600080fd5b610e48610b70565b905081358152610e5a60208301610b09565b6020820152604082013567ffffffffffffffff80821115610e7a57600080fd5b610e8685838601610bd8565b60408401526060840135915080821115610e9f57600080fd5b610eab85838601610bd8565b60608401526080840135915080821115610ec457600080fd5b50610ed184828501610c69565b60808301525092915050565b600060208284031215610eef57600080fd5b813567ffffffffffffffff811115610f0657600080fd5b610f1284828501610e2e565b91505092915050565b600060208201905082825292915050565b60008060408385031215610f3f57600080fd5b610f4883610c4a565b9150602083013567ffffffffffffffff811115610f6457600080fd5b610f7085828601610e2e565b9150509250929050565b600060208284031215610f8c57600080fd5b610f9582610b09565b905092915050565b6000602082019050821515825292915050565b60008060408385031215610fc357600080fd5b610fcc83610c4a565b9150602083013590509250929050565b60006020808301818452808551808352604086019150838701925060005b818110156110235760018060a01b03845116835284830192508484019350600181019050610ffa565b505080935050505092915050565b60208152601160208201527f556e737570706f7274656420636861696e00000000000000000000000000000060408201526000606082019050919050565b6000815180845260005b8181101561109b57602080828601015181838801015250602081019050611079565b506000602082860101526020601f19601f83011685010191505092915050565b67ffffffffffffffff831681526040602082015260006110de604083018461106f565b90509392505050565b60208152601660208201527f496e76616c696420636861696e2073656c6563746f720000000000000000000060408201526000606082019050919050565b600081518084526020808501945080840160005b8381101561116e57815160018060a01b0381511688528381015184890152506040870196508282019150600181019050611139565b5050505082905092915050565b60a08152600061118e60a083018861106f565b82810360208401526111a0818861106f565b905082810360408401526111b48187611125565b905082810360608401526111c8818661106f565b91505060018060a01b03831660808301529695505050505050565b60208152601460208201527f496e76616c696420736f7572636520636861696e00000000000000000000000060408201526000606082019050919050565b60208152601660208201527f496e76616c69642074617267657420616464726573730000000000000000000060408201526000606082019050919050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a0606084015261129960c084018261106f565b90506060840151601f19808584030160808601526112b7838361106f565b925060808601519150808584030160a0860152506112d58282611125565b9250505092915050565b600060208201905060018060a01b038316825292915050565b67ffffffffffffffff83168152604060208201526000825160a0604084015261132460e084018261106f565b90506020840151603f1980858403016060860152611342838361106f565b9250604086015191508085840301608086015261135f8383611125565b925060018060a01b0360608701511660a086015260808601519150808584030160c08601525061138f828261106f565b925050509392505050565b6000602082840312156113ac57600080fd5b815190509291505056fea26469706673582212207657368eb7b0fe5debf946fc6c1b53cc06cfdc4d897bc8ee079174da12e0a32464736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
