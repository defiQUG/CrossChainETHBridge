/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f2a806100206000396000f3fe6080604052600436106100595760003560e01c806320487ded1461006557806385572ffb146100a25780638da040d5146100cb57806396f4e9f9146100f4578063a48a905814610124578063fbca3b741461016157610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c600480360381019061008791906109f3565b61019e565b6040516100999190610af1565b60405180910390f35b3480156100ae57600080fd5b506100c960048036038101906100c49190610b02565b6101ed565b005b3480156100d757600080fd5b506100f260048036038101906100ed9190610bd6565b610297565b005b61010e600480360381019061010991906109f3565b6104be565b60405161011b9190610c1c565b60405180910390f35b34801561013057600080fd5b5061014b60048036038101906101469190610c2d565b6106b4565b6040516101589190610c50565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610c2d565b610707565b6040516101959190610c63565b60405180910390f35b60006101b4673b8bd778e4e50bb960c01b6107aa565b6101c8671d51aa1cb8b4cd9860c01b6107aa565b6101dc674cf5912eead04cd560c01b6107aa565b67016345785d8a0000905092915050565b6102016758b67ade4723bc9f60c01b6107aa565b610215679136b1a74610191660c01b6107aa565b61022967706ed8da2528392a60c01b6107aa565b3373ffffffffffffffffffffffffffffffffffffffff166385572ffb826040518263ffffffff1660e01b81526004016102629190610d04565b600060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b5050505050565b6102ab67c97f13ede8a3a64360c01b6107aa565b6102bf67c4b7b53f5ebd1a5c60c01b6107aa565b6102d367a791e253db6bf3c860c01b6107aa565b60008067ffffffffffffffff8111156102ef576102ee6107fe565b5b60405190808252806020026020018201604052801561032857816020015b6103156107ad565b81526020019060019003908161030d5790505b50905061033f67c523f73f44fd36ca60c01b6107aa565b610353676e55133f58320b8660c01b6107aa565b6000826040516020016103669190610af1565b604051602081830303815290604052905061038b674854b16d502c035b60c01b6107aa565b61039f67f65d5504356507c660c01b6107aa565b6000846040516020016103b29190610dca565b60405160208183030381529060405290506103d76710c745e4e5e3a0f160c01b6107aa565b6103eb6751e4459bcfdffa4c60c01b6107aa565b60006040518060a00160405280888152602001608a67ffffffffffffffff168152602001838152602001848152602001858152509050610435670d558edcbcf39d9360c01b6107aa565b610449678f0aaceb9dbc91b260c01b6107aa565b8773ffffffffffffffffffffffffffffffffffffffff166385572ffb826040518263ffffffff1660e01b81526004016104829190610d04565b600060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b505050505050505050505050565b60006104d467caea21dc7c536d9e60c01b6107aa565b6104e8678066ea369496750d60c01b6107aa565b6104fc679ced87754696381860c01b6107aa565b61051067e7ff52379fd4a8f060c01b6107aa565b60898367ffffffffffffffff161461055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055490610ded565b60405180910390fd5b6105716729cd57bfd6a4d35d60c01b6107aa565b61058567e4eefaf246743f6460c01b6107aa565b61059967d7e0464d17366db860c01b6107aa565b600082600001516105a990610e2b565b60601c90506105c267d7c66fb5e1c14fa260c01b6107aa565b6105d6675280f7d02460f2ef60c01b6107aa565b600083602001518060200190518101906105f09190610e68565b90506106066773fd95bb522a1b7260c01b6107aa565b61061a675ef6624230af410c60c01b6107aa565b7f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f69685838360405161064d93929190610e84565b60405180910390a161066967a88a9cb2473e08b460c01b6107aa565b61067d6737cdcfcc7d8e400160c01b6107aa565b423383836040516020016106949493929190610eb5565b604051602081830303815290604052805190602001209250505092915050565b60006106ca67397ba2a9b843b6a360c01b6107aa565b6106de67e0a9cad2c4ad0f9360c01b6107aa565b6106f267c7341cae44ec60c260c01b6107aa565b60898267ffffffffffffffff16149050919050565b606061071d67207cea731875ff4e60c01b6107aa565b61073167b01ca0a33f8edbfd60c01b6107aa565b600067ffffffffffffffff81111561074c5761074b6107fe565b5b60405190808252806020026020018201604052801561077a5781602001602082028036833780820191505090505b5090506107916702bb37263916bef660c01b6107aa565b6107a567dbc287ebaa72e2b560c01b6107aa565b919050565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905067ffffffffffffffff811681146107f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600060405190506040810181811067ffffffffffffffff8211171561083c5761083b6107fe565b5b806040525090565b6000604051905060a0810181811067ffffffffffffffff8211171561086c5761086b6107fe565b5b806040525090565b60006040519050601f19601f830116810181811067ffffffffffffffff821117156108a2576108a16107fe565b5b8060405250919050565b600082601f8301126108bd57600080fd5b813567ffffffffffffffff8111156108d8576108d76107fe565b5b6108eb6020601f19601f84011601610874565b81815284602083860101111561090057600080fd5b81602085016020830137600060208383010152809250505092915050565b60008135905060018060a01b038116811461093857600080fd5b919050565b600082601f83011261094e57600080fd5b8135602067ffffffffffffffff82111561096b5761096a6107fe565b5b610979818360051b01610874565b808382528282019150828460061b87010193508684111561099957600080fd5b8286015b848110156109e557604081890312156109b65760008081fd5b6109be610814565b6109c78261091e565b8152848201358582015280845250838301925060408101905061099d565b508094505050505092915050565b60008060408385031215610a0657600080fd5b610a0f836107dd565b9150602083013567ffffffffffffffff80821115610a2c57600080fd5b818501915060a08287031215610a4157600080fd5b610a49610844565b823582811115610a5857600080fd5b610a64888286016108ac565b825250602083013582811115610a7957600080fd5b610a85888286016108ac565b602083015250604083013582811115610a9d57600080fd5b610aa98882860161093d565b604083015250610abb6060840161091e565b6060820152608083013582811115610ad257600080fd5b610ade888286016108ac565b6080830152508093505050509250929050565b600060208201905082825292915050565b600060208284031215610b1457600080fd5b813567ffffffffffffffff80821115610b2c57600080fd5b818401915060a08286031215610b4157600080fd5b610b49610844565b82358152610b59602084016107dd565b6020820152604083013582811115610b7057600080fd5b610b7c878286016108ac565b604083015250606083013582811115610b9457600080fd5b610ba0878286016108ac565b606083015250608083013582811115610bb857600080fd5b610bc48782860161093d565b60808301525080935050505092915050565b60008060008060808587031215610bec57600080fd5b610bf58561091e565b935060208501359250610c0a6040860161091e565b91506060850135905092959194509250565b600060208201905082825292915050565b600060208284031215610c3f57600080fd5b610c48826107dd565b905092915050565b6000602082019050821515825292915050565b60006020808301818452808551808352604086019150838701925060005b81811015610caa5760018060a01b03845116835284830192508484019350600181019050610c81565b505080935050505092915050565b6000815180845260005b81811015610ce457602080828601015181838801015250602081019050610cc2565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283518184015280840151604067ffffffffffffffff82168186015280860151915060a06060860152610d4060c0860183610cb8565b91506060860151601f1980878503016080880152610d5e8483610cb8565b935060808801519150808785030160a08801525082815180855285850191508583019450600092505b80831015610dbb57845160018060a01b03815116835286810151878401525083820191508585019450600183019250610d87565b50809550505050505092915050565b6bffffffffffffffffffffffff198260601b168152600060148201905092915050565b60208152601660208201527f496e76616c696420636861696e2073656c6563746f720000000000000000000060408201526000606082019050919050565b6000815160208301516bffffffffffffffffffffffff1980821693506014831015610e605780818460140360031b1b83161693505b505050919050565b600060208284031215610e7a57600080fd5b8151905092915050565b600060608201905067ffffffffffffffff8516825260018060a01b0384166020830152826040830152949350505050565b84815260006bffffffffffffffffffffffff19808660601b166020840152808560601b166034840152508260488301526068820190509594505050505056fea2646970667358221220e118a6a87a93852ba7b89b21239b662470dbe09372f462118b09bee9bd5c1b7064736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
