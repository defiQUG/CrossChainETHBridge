/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109f6806100206000396000f3fe6080604052600436106100595760003560e01c806320487ded1461006557806385572ffb146100a25780638da040d5146100c457806396f4e9f9146100e4578063a48a9058146100f7578063fbca3b741461013257600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061008f6100803660046105f0565b67016345785d8a000092915050565b6040519081526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd3660046106ed565b61016d565b005b3480156100d057600080fd5b506100c26100df3660046107bd565b6101c5565b61008f6100f23660046105f0565b6102df565b34801561010357600080fd5b50610122610112366004610801565b67ffffffffffffffff1660891490565b6040519015158152602001610099565b34801561013e57600080fd5b5061016061014d366004610801565b5060408051600081526020810190915290565b6040516100999190610823565b6040516385572ffb60e01b815233906385572ffb906101909084906004016108b6565b600060405180830381600087803b1580156101aa57600080fd5b505af11580156101be573d6000803e3d6000fd5b5050505050565b6040805160008082526020820190925281610202565b60408051808201909152600080825260208201528152602001906001900390816101db5790505b50905060008260405160200161021a91815260200190565b60408051808303601f19018152828252606087901b6001600160601b03191660208401528151601481850301815260d48401835260348401898152608a6054860152607485018290526094850183905260b490940186905291516385572ffb60e01b81529093509091906001600160a01b038916906385572ffb906102a39084906004016108b6565b600060405180830381600087803b1580156102bd57600080fd5b505af11580156102d1573d6000803e3d6000fd5b505050505050505050505050565b60008267ffffffffffffffff166089146103385760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b604482015260640160405180910390fd5b815160009061034690610970565b60601c90506000836020015180602001905181019061036591906109a7565b6040805167ffffffffffffffff881681526001600160a01b03851660208201529081018290529091507f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6969060600160405180910390a1604080514260208083019190915233606090811b6001600160601b03199081168486015295901b909416605482015260688082019390935281518082039093018352608801905280519101209392505050565b803567ffffffffffffffff8116811461042657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156104645761046461042b565b60405290565b60405160a0810167ffffffffffffffff811182821017156104645761046461042b565b604051601f8201601f1916810167ffffffffffffffff811182821017156104b6576104b661042b565b604052919050565b600082601f8301126104cf57600080fd5b813567ffffffffffffffff8111156104e9576104e961042b565b6104fc601f8201601f191660200161048d565b81815284602083860101111561051157600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461042657600080fd5b600082601f83011261055657600080fd5b8135602067ffffffffffffffff8211156105725761057261042b565b610580818360051b0161048d565b82815260069290921b8401810191818101908684111561059f57600080fd5b8286015b848110156105e557604081890312156105bc5760008081fd5b6105c4610441565b6105cd8261052e565b815281850135858201528352918301916040016105a3565b509695505050505050565b6000806040838503121561060357600080fd5b61060c8361040e565b9150602083013567ffffffffffffffff8082111561062957600080fd5b9084019060a0828703121561063d57600080fd5b61064561046a565b82358281111561065457600080fd5b610660888286016104be565b82525060208301358281111561067557600080fd5b610681888286016104be565b60208301525060408301358281111561069957600080fd5b6106a588828601610545565b6040830152506106b76060840161052e565b60608201526080830135828111156106ce57600080fd5b6106da888286016104be565b6080830152508093505050509250929050565b6000602082840312156106ff57600080fd5b813567ffffffffffffffff8082111561071757600080fd5b9083019060a0828603121561072b57600080fd5b61073361046a565b823581526107436020840161040e565b602082015260408301358281111561075a57600080fd5b610766878286016104be565b60408301525060608301358281111561077e57600080fd5b61078a878286016104be565b6060830152506080830135828111156107a257600080fd5b6107ae87828601610545565b60808301525095945050505050565b600080600080608085870312156107d357600080fd5b6107dc8561052e565b9350602085013592506107f16040860161052e565b9396929550929360600135925050565b60006020828403121561081357600080fd5b61081c8261040e565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156108645783516001600160a01b03168352928401929184019160010161083f565b50909695505050505050565b6000815180845260005b818110156108965760208185018101518683018201520161087a565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283518184015280840151604067ffffffffffffffff82168186015280860151915060a060608601526108f260c0860183610870565b91506060860151601f19808785030160808801526109108483610870565b608089015188820390920160a089015281518082529186019450600092508501905b8083101561096457845180516001600160a01b0316835286015186830152938501936001929092019190830190610932565b50979650505050505050565b805160208201516001600160601b0319808216929190601483101561099f5780818460140360031b1b83161693505b505050919050565b6000602082840312156109b957600080fd5b505191905056fea2646970667358221220bbd38d1379ee2b18be9043065844fe50bf24272d936e707f73239fb511d9c1bf64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
