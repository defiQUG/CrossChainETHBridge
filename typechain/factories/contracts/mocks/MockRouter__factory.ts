/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a09806100206000396000f3fe6080604052600436106100595760003560e01c806320487ded146100655780638a8a8f68146100a25780638da040d5146100c457806396f4e9f9146100e4578063a48a9058146100f7578063fbca3b741461013157600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061008f610080366004610601565b67016345785d8a000092915050565b6040519081526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd3660046106fd565b61016c565b005b3480156100d057600080fd5b506100c26100df3660046107cc565b6101ce565b61008f6100f2366004610601565b6102f3565b34801561010357600080fd5b50610121610112366004610810565b6001600160401b031660891490565b6040519015158152602001610099565b34801561013d57600080fd5b5061015f61014c366004610810565b5060408051600081526020810190915290565b6040516100999190610832565b6040516385572ffb60e01b81526001600160a01b038316906385572ffb906101989084906004016108c5565b600060405180830381600087803b1580156101b257600080fd5b505af11580156101c6573d6000803e3d6000fd5b505050505050565b6000816040516020016101e391815260200190565b60408051808303601f190181526000808452602084019092529250908161022c565b60408051808201909152600080825260208201528152602001906001900390816102055790505b509050856001600160a01b03166385572ffb6040518060a00160405280888152602001608a6001600160401b031681526020018760405160200161027f91906001600160a01b0391909116815260200190565b6040516020818303038152906040528152602001858152602001848152506040518263ffffffff1660e01b81526004016102b991906108c5565b600060405180830381600087803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b50505050505050505050565b6000826001600160401b031660891461034b5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21031b430b4b71039b2b632b1ba37b960511b604482015260640160405180910390fd5b81516000906103599061097e565b60601c90506000836020015180602001905181019061037891906109ba565b604080516001600160401b03881681526001600160a01b03851660208201529081018290529091507f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6969060600160405180910390a1604080514260208083019190915233606090811b6bffffffffffffffffffffffff199081168486015295901b909416605482015260688082019390935281518082039093018352608801905280519101209392505050565b80356001600160401b038116811461043c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561047957610479610441565b60405290565b60405160a081016001600160401b038111828210171561047957610479610441565b604051601f8201601f191681016001600160401b03811182821017156104c9576104c9610441565b604052919050565b600082601f8301126104e257600080fd5b81356001600160401b038111156104fb576104fb610441565b61050e601f8201601f19166020016104a1565b81815284602083860101111561052357600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461043c57600080fd5b600082601f83011261056857600080fd5b813560206001600160401b0382111561058357610583610441565b610591818360051b016104a1565b82815260069290921b840181019181810190868411156105b057600080fd5b8286015b848110156105f657604081890312156105cd5760008081fd5b6105d5610457565b6105de82610540565b815281850135858201528352918301916040016105b4565b509695505050505050565b6000806040838503121561061457600080fd5b61061d83610425565b915060208301356001600160401b038082111561063957600080fd5b9084019060a0828703121561064d57600080fd5b61065561047f565b82358281111561066457600080fd5b610670888286016104d1565b82525060208301358281111561068557600080fd5b610691888286016104d1565b6020830152506040830135828111156106a957600080fd5b6106b588828601610557565b6040830152506106c760608401610540565b60608201526080830135828111156106de57600080fd5b6106ea888286016104d1565b6080830152508093505050509250929050565b6000806040838503121561071057600080fd5b61071983610540565b915060208301356001600160401b038082111561073557600080fd5b9084019060a0828703121561074957600080fd5b61075161047f565b8235815261076160208401610425565b602082015260408301358281111561077857600080fd5b610784888286016104d1565b60408301525060608301358281111561079c57600080fd5b6107a8888286016104d1565b6060830152506080830135828111156107c057600080fd5b6106ea88828601610557565b600080600080608085870312156107e257600080fd5b6107eb85610540565b93506020850135925061080060408601610540565b9396929550929360600135925050565b60006020828403121561082257600080fd5b61082b82610425565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156108735783516001600160a01b03168352928401929184019160010161084e565b50909695505050505050565b6000815180845260005b818110156108a557602081850181015186830182015201610889565b506000602082860101526020601f19601f83011685010191505092915050565b600060208083528351818401528084015160406001600160401b0382168186015280860151915060a0606086015261090060c086018361087f565b91506060860151601f198087850301608088015261091e848361087f565b608089015188820390920160a089015281518082529186019450600092508501905b8083101561097257845180516001600160a01b0316835286015186830152938501936001929092019190830190610940565b50979650505050505050565b805160208201516bffffffffffffffffffffffff1980821692919060148310156109b25780818460140360031b1b83161693505b505050919050565b6000602082840312156109cc57600080fd5b505191905056fea26469706673582212205449edbb0096539e1f832571bc01de84a2ecef9365c8587487e7fe542c2bd40e64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
