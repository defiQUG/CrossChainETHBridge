/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ed5806100206000396000f3fe6080604052600436106100595760003560e01c806320487ded146100655780638a8a8f68146100a25780638da040d5146100cb57806396f4e9f9146100f4578063a48a905814610124578063fbca3b741461016157610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c60048036038101906100879190610998565b61019e565b6040516100999190610a96565b60405180910390f35b3480156100ae57600080fd5b506100c960048036038101906100c49190610aa7565b6101ed565b005b3480156100d757600080fd5b506100f260048036038101906100ed9190610b8b565b610298565b005b61010e60048036038101906101099190610998565b610463565b60405161011b9190610bd1565b60405180910390f35b34801561013057600080fd5b5061014b60048036038101906101469190610be2565b610659565b6040516101589190610c05565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610be2565b6106ac565b6040516101959190610c18565b60405180910390f35b60006101b467a791e253db6bf3c860c01b61074f565b6101c867c523f73f44fd36ca60c01b61074f565b6101dc676e55133f58320b8660c01b61074f565b67016345785d8a0000905092915050565b61020167299dff4af414185860c01b61074f565b6102156765630ce69f20059860c01b61074f565b610229677f6f426029a8359260c01b61074f565b8173ffffffffffffffffffffffffffffffffffffffff166385572ffb826040518263ffffffff1660e01b81526004016102629190610cb9565b600060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b505050505050565b6102ac679136b1a74610191660c01b61074f565b6102c067706ed8da2528392a60c01b61074f565b6102d467decb403104d0b0b560c01b61074f565b6000816040516020016102e79190610a96565b604051602081830303815290604052905061030c6780fd51e48ead033960c01b61074f565b610320673331dd6303fbf6ef60c01b61074f565b60008067ffffffffffffffff81111561033c5761033b6107a3565b5b60405190808252806020026020018201604052801561037557816020015b610362610752565b81526020019060019003908161035a5790505b50905061038c677af640e5eee5e5cf60c01b61074f565b6103a0670e43634d8d7c99d360c01b61074f565b8573ffffffffffffffffffffffffffffffffffffffff166385572ffb6040518060a00160405280888152602001608a67ffffffffffffffff168152602001876040516020016103ef9190610d7f565b6040516020818303038152906040528152602001858152602001848152506040518263ffffffff1660e01b81526004016104299190610cb9565b600060405180830381600087803b15801561044357600080fd5b505af1158015610457573d6000803e3d6000fd5b50505050505050505050565b60006104796737cdcfcc7d8e400160c01b61074f565b61048d673b8bd778e4e50bb960c01b61074f565b6104a1671d51aa1cb8b4cd9860c01b61074f565b6104b5674cf5912eead04cd560c01b61074f565b60898367ffffffffffffffff1614610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f990610d98565b60405180910390fd5b61051667397ba2a9b843b6a360c01b61074f565b61052a67e0a9cad2c4ad0f9360c01b61074f565b61053e67c7341cae44ec60c260c01b61074f565b6000826000015161054e90610dd6565b60601c905061056767207cea731875ff4e60c01b61074f565b61057b67b01ca0a33f8edbfd60c01b61074f565b600083602001518060200190518101906105959190610e13565b90506105ab6702bb37263916bef660c01b61074f565b6105bf67dbc287ebaa72e2b560c01b61074f565b7f523796049da261d38b2e661d0b53c1e3c1968d1a58be557f76cbe47d7fc6f6968583836040516105f293929190610e2f565b60405180910390a161060e67c97f13ede8a3a64360c01b61074f565b61062267c4b7b53f5ebd1a5c60c01b61074f565b423383836040516020016106399493929190610e60565b604051602081830303815290604052805190602001209250505092915050565b600061066f674854b16d502c035b60c01b61074f565b61068367f65d5504356507c660c01b61074f565b6106976710c745e4e5e3a0f160c01b61074f565b60898267ffffffffffffffff16149050919050565b60606106c26751e4459bcfdffa4c60c01b61074f565b6106d6670d558edcbcf39d9360c01b61074f565b600067ffffffffffffffff8111156106f1576106f06107a3565b5b60405190808252806020026020018201604052801561071f5781602001602082028036833780820191505090505b509050610736678f0aaceb9dbc91b260c01b61074f565b61074a6758b67ade4723bc9f60c01b61074f565b919050565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905067ffffffffffffffff8116811461079e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600060405190506040810181811067ffffffffffffffff821117156107e1576107e06107a3565b5b806040525090565b6000604051905060a0810181811067ffffffffffffffff82111715610811576108106107a3565b5b806040525090565b60006040519050601f19601f830116810181811067ffffffffffffffff82111715610847576108466107a3565b5b8060405250919050565b600082601f83011261086257600080fd5b813567ffffffffffffffff81111561087d5761087c6107a3565b5b6108906020601f19601f84011601610819565b8181528460208386010111156108a557600080fd5b81602085016020830137600060208383010152809250505092915050565b60008135905060018060a01b03811681146108dd57600080fd5b919050565b600082601f8301126108f357600080fd5b8135602067ffffffffffffffff8211156109105761090f6107a3565b5b61091e818360051b01610819565b808382528282019150828460061b87010193508684111561093e57600080fd5b8286015b8481101561098a576040818903121561095b5760008081fd5b6109636107b9565b61096c826108c3565b81528482013585820152808452508383019250604081019050610942565b508094505050505092915050565b600080604083850312156109ab57600080fd5b6109b483610782565b9150602083013567ffffffffffffffff808211156109d157600080fd5b818501915060a082870312156109e657600080fd5b6109ee6107e9565b8235828111156109fd57600080fd5b610a0988828601610851565b825250602083013582811115610a1e57600080fd5b610a2a88828601610851565b602083015250604083013582811115610a4257600080fd5b610a4e888286016108e2565b604083015250610a60606084016108c3565b6060820152608083013582811115610a7757600080fd5b610a8388828601610851565b6080830152508093505050509250929050565b600060208201905082825292915050565b60008060408385031215610aba57600080fd5b610ac3836108c3565b9150602083013567ffffffffffffffff80821115610ae057600080fd5b818501915060a08287031215610af557600080fd5b610afd6107e9565b82358152610b0d60208401610782565b6020820152604083013582811115610b2457600080fd5b610b3088828601610851565b604083015250606083013582811115610b4857600080fd5b610b5488828601610851565b606083015250608083013582811115610b6c57600080fd5b610b78888286016108e2565b6080830152508093505050509250929050565b60008060008060808587031215610ba157600080fd5b610baa856108c3565b935060208501359250610bbf604086016108c3565b91506060850135905092959194509250565b600060208201905082825292915050565b600060208284031215610bf457600080fd5b610bfd82610782565b905092915050565b6000602082019050821515825292915050565b60006020808301818452808551808352604086019150838701925060005b81811015610c5f5760018060a01b03845116835284830192508484019350600181019050610c36565b505080935050505092915050565b6000815180845260005b81811015610c9957602080828601015181838801015250602081019050610c77565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283518184015280840151604067ffffffffffffffff82168186015280860151915060a06060860152610cf560c0860183610c6d565b91506060860151601f1980878503016080880152610d138483610c6d565b935060808801519150808785030160a08801525082815180855285850191508583019450600092505b80831015610d7057845160018060a01b03815116835286810151878401525083820191508585019450600183019250610d3c565b50809550505050505092915050565b600060208201905060018060a01b038316825292915050565b60208152601660208201527f496e76616c696420636861696e2073656c6563746f720000000000000000000060408201526000606082019050919050565b6000815160208301516bffffffffffffffffffffffff1980821693506014831015610e0b5780818460140360031b1b83161693505b505050919050565b600060208284031215610e2557600080fd5b8151905092915050565b600060608201905067ffffffffffffffff8516825260018060a01b0384166020830152826040830152949350505050565b84815260006bffffffffffffffffffffffff19808660601b166020840152808560601b166034840152508260488301526068820190509594505050505056fea2646970667358221220af275b8d304acc29bf1039992174d007d22020816b0b4b6c1aabe0021b61a3df64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
