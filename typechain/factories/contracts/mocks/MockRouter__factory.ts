/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610879806100206000396000f3fe60806040526004361061004a5760003560e01c806320487ded1461004f5780632cad5a1f1461008c57806396f4e9f9146100ae578063a48a9058146100c1578063fbca3b74146100f2575b600080fd5b34801561005b57600080fd5b5061007961006a3660046104a8565b67016345785d8a000092915050565b6040519081526020015b60405180910390f35b34801561009857600080fd5b506100ac6100a73660046105a5565b61012d565b005b6100796100bc3660046104a8565b610231565b3480156100cd57600080fd5b506100e26100dc36600461060d565b50600190565b6040519015158152602001610083565b3480156100fe57600080fd5b5061012061010d36600461060d565b5060408051600081526020810190915290565b604051610083919061062f565b604080516000808252602082019092528161016a565b60408051808201909152600080825260208201528152602001906001900390816101435790505b509050846001600160a01b03166385572ffb6040518060a00160405280878152602001600167ffffffffffffffff168152602001866040516020016101be91906001600160a01b0391909116815260200190565b6040516020818303038152906040528152602001858152602001848152506040518263ffffffff1660e01b81526004016101f891906106c2565b600060405180830381600087803b15801561021257600080fd5b505af1158015610226573d6000803e3d6000fd5b505050505050505050565b60008083836000015184602001516040516020016102519392919061077c565b6040516020818303038152906040528051906020012090507f3d8a9f055772202d2c3c1fddbad930d3dbe588d8692b75b84cee0719462829118185856000015161029a906107bb565b60601c86602001516000346040516102b7969594939291906107f7565b60405180910390a19392505050565b803567ffffffffffffffff811681146102de57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561031c5761031c6102e3565b60405290565b60405160a0810167ffffffffffffffff8111828210171561031c5761031c6102e3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561036e5761036e6102e3565b604052919050565b600082601f83011261038757600080fd5b813567ffffffffffffffff8111156103a1576103a16102e3565b6103b4601f8201601f1916602001610345565b8181528460208386010111156103c957600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b03811681146102de57600080fd5b600082601f83011261040e57600080fd5b8135602067ffffffffffffffff82111561042a5761042a6102e3565b610438818360051b01610345565b82815260069290921b8401810191818101908684111561045757600080fd5b8286015b8481101561049d57604081890312156104745760008081fd5b61047c6102f9565b610485826103e6565b8152818501358582015283529183019160400161045b565b509695505050505050565b600080604083850312156104bb57600080fd5b6104c4836102c6565b9150602083013567ffffffffffffffff808211156104e157600080fd5b9084019060a082870312156104f557600080fd5b6104fd610322565b82358281111561050c57600080fd5b61051888828601610376565b82525060208301358281111561052d57600080fd5b61053988828601610376565b60208301525060408301358281111561055157600080fd5b61055d888286016103fd565b60408301525061056f606084016103e6565b606082015260808301358281111561058657600080fd5b61059288828601610376565b6080830152508093505050509250929050565b600080600080608085870312156105bb57600080fd5b6105c4856103e6565b9350602085013592506105d9604086016103e6565b9150606085013567ffffffffffffffff8111156105f557600080fd5b61060187828801610376565b91505092959194509250565b60006020828403121561061f57600080fd5b610628826102c6565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156106705783516001600160a01b03168352928401929184019160010161064b565b50909695505050505050565b6000815180845260005b818110156106a257602081850181015186830182015201610686565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283518184015280840151604067ffffffffffffffff82168186015280860151915060a060608601526106fe60c086018361067c565b91506060860151601f198087850301608088015261071c848361067c565b608089015188820390920160a089015281518082529186019450600092508501905b8083101561077057845180516001600160a01b031683528601518683015293850193600192909201919083019061073e565b50979650505050505050565b67ffffffffffffffff8416815260606020820152600061079f606083018561067c565b82810360408401526107b1818561067c565b9695505050505050565b805160208201516bffffffffffffffffffffffff1980821692919060148310156107ef5780818460140360031b1b83161693505b505050919050565b86815267ffffffffffffffff86166020820152600060018060a01b03808716604084015260c0606084015261082f60c084018761067c565b941660808301525060a0015294935050505056fea2646970667358221220905dcc7dbd54ba46bcfab2dc7ba1badeecf35d967f8c1da55c3c1044aab0eabb64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
