/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRouter,
  MockRouterInterface,
} from "../../../contracts/mocks/MockRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "simulateMessageReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "validateMessage",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061185f806100206000396000f3fe60806040526004361061007f5760003560e01c80639957f9341161004e5780639957f9341461015e578063a48a905814610187578063f9d53aeb146101c4578063fbca3b74146101f457610086565b806320487ded1461008b578063582311f7146100c857806385572ffb1461010557806396f4e9f91461012e57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906110a0565b610231565b6040516100bf919061119e565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea919061125e565b61031d565b6040516100fc919061129c565b60405180910390f35b34801561011157600080fd5b5061012c6004803603810190610127919061125e565b61055a565b005b610148600480360381019061014391906110a0565b610672565b60405161015591906112af565b60405180910390f35b34801561016a57600080fd5b50610185600480360381019061018091906112c0565b610827565b005b34801561019357600080fd5b506101ae60048036038101906101a99190611312565b610aca565b6040516101bb919061129c565b60405180910390f35b6101de60048036038101906101d99190611335565b610b1d565b6040516101eb91906112af565b60405180910390f35b34801561020057600080fd5b5061021b60048036038101906102169190611312565b610cee565b6040516102289190611365565b60405180910390f35b600061024767ee58bac2ff23fc3960c01b610e47565b61025b674876c5afb425822a60c01b610e47565b61026f679488eadaa5aba66c60c01b610e47565b6102836718aa2c08c420543060c01b610e47565b60898367ffffffffffffffff16146102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c7906113ba565b60405180910390fd5b6102e467c1e83c1716f4a23f60c01b610e47565b6102f86795797590fec7576360c01b610e47565b61030c6779e65e46d83cdfbe60c01b610e47565b67016345785d8a0000905092915050565b6000610333674493bfa77f59ce9f60c01b610e47565b61034767992865fb48f7cb8960c01b610e47565b61035b67d4f336f37f5035a860c01b610e47565b6000826020015167ffffffffffffffff16036103e85761038567ecdc2e75ea2a8c2a60c01b610e47565b6103996721340d8ff4f296a560c01b610e47565b6103ad67caea21dc7c536d9e60c01b610e47565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df906113f8565b60405180910390fd5b6103fc678066ea369496750d60c01b610e47565b610410679ced87754696381860c01b610e47565b61042467e7ff52379fd4a8f060c01b610e47565b6000826060015180602001905181019061043e9190611436565b5090506104556729cd57bfd6a4d35d60c01b610e47565b61046967e4eefaf246743f6460c01b610e47565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610514576104b167d7e0464d17366db860c01b610e47565b6104c567d7c66fb5e1c14fa260c01b610e47565b6104d9675280f7d02460f2ef60c01b610e47565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b90611466565b60405180910390fd5b6105286773fd95bb522a1b7260c01b610e47565b61053c675ef6624230af410c60c01b610e47565b61055067a88a9cb2473e08b460c01b610e47565b6001915050919050565b61056e676e55133f58320b8660c01b610e47565b610582674854b16d502c035b60c01b610e47565b61059667f65d5504356507c660c01b610e47565b6105aa6710c745e4e5e3a0f160c01b610e47565b6105b38161031d565b6105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e9906114a4565b60405180910390fd5b6106066751e4459bcfdffa4c60c01b610e47565b61061a670d558edcbcf39d9360c01b610e47565b61062e678f0aaceb9dbc91b260c01b610e47565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed8160200151826060015160405161066792919061152e565b60405180910390a150565b600061068867b0a11a43df0b843d60c01b610e47565b61069c679062e4d31c4b4fde60c01b610e47565b6106b0670bbe29db39d1825c60c01b610e47565b6106c46721b9ed5454527bf660c01b610e47565b60008367ffffffffffffffff1603610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906113f8565b60405180910390fd5b610725674f9491cccce538c060c01b610e47565b61073967920122be79c3d03b60c01b610e47565b61074d679038c15eec3d2a3f60c01b610e47565b60008260000151836020015184604001518560800151866060015160405160200161077c9594939291906115b0565b60405160208183030381529060405290506107a167aaac651f921a6b6160c01b610e47565b6107b567aec0ea8b345099ef60c01b610e47565b7f77d8f5088b77499cc44d4807faadc1dee5bf6d0cbf057f5cebda748655a9a9ed84826040516107e692919061152e565b60405180910390a161080267500b74b53c66e6ad60c01b610e47565b61081667fe6a058857f6ec5b60c01b610e47565b808051906020012091505092915050565b61083b6737cdcfcc7d8e400160c01b610e47565b61084f673b8bd778e4e50bb960c01b610e47565b610863671d51aa1cb8b4cd9860c01b610e47565b610877674cf5912eead04cd560c01b610e47565b608a816020015167ffffffffffffffff16146108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf90611618565b60405180910390fd5b6108dc67397ba2a9b843b6a360c01b610e47565b6108f067e0a9cad2c4ad0f9360c01b610e47565b61090467c7341cae44ec60c260c01b610e47565b61091867207cea731875ff4e60c01b610e47565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90611656565b60405180910390fd5b61099b67b01ca0a33f8edbfd60c01b610e47565b6109af6702bb37263916bef660c01b610e47565b6109c367dbc287ebaa72e2b560c01b610e47565b6109d767c97f13ede8a3a64360c01b610e47565b6109e08161031d565b610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690611694565b60405180910390fd5b610a3367c4b7b53f5ebd1a5c60c01b610e47565b610a4767a791e253db6bf3c860c01b610e47565b610a5b67c523f73f44fd36ca60c01b610e47565b8173ffffffffffffffffffffffffffffffffffffffff166385572ffb826040518263ffffffff1660e01b8152600401610a9491906116d2565b600060405180830381600087803b158015610aae57600080fd5b505af1158015610ac2573d6000803e3d6000fd5b505050505050565b6000610ae067f038536978d7fd1360c01b610e47565b610af46753b9ea70ebabf12c60c01b610e47565b610b0867e39ee93607d37f7a60c01b610e47565b60898267ffffffffffffffff16149050919050565b6000610b3367a76f94e73f81394160c01b610e47565b610b4767b76a3782be1581fa60c01b610e47565b610b5b67f43420b331309ce560c01b610e47565b60006040518060a0016040528085604051602001610b799190611752565b604051602081830303815290604052815260200184604051602001610b9e919061119e565b6040516020818303038152906040528152602001600067ffffffffffffffff811115610bcd57610bcc610e9b565b5b604051908082528060200260200182016040528015610c0657816020015b610bf3610e4a565b815260200190600190039081610beb5790505b508152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001604051806020016040528060008152508152509050610c5267fe7cedcf81564cd060c01b610e47565b610c66679acd3d82cfceae0060c01b610e47565b3073ffffffffffffffffffffffffffffffffffffffff166396f4e9f96089836040518363ffffffff1660e01b8152600401610ca292919061176b565b6020604051808303816000875af1158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce5919061180d565b91505092915050565b6060610d0467a8d672c69e40032f60c01b610e47565b610d18678d8ada60f238c77b60c01b610e47565b610d2c6706017076bc5fc58460c01b610e47565b610d4067fe79f5b9f99ac64060c01b610e47565b60898267ffffffffffffffff1614610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d84906113ba565b60405180910390fd5b610da16705a478aec67f131360c01b610e47565b610db56740fd67f155d87ee760c01b610e47565b610dc96797b0b38f1f2f2b3460c01b610e47565b60008067ffffffffffffffff811115610de557610de4610e9b565b5b604051908082528060200260200182016040528015610e135781602001602082028036833780820191505090505b509050610e2a67bdcb261ddebbc01e60c01b610e47565b610e3e67269995a5a607109d60c01b610e47565b80915050919050565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905067ffffffffffffffff81168114610e9657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600060405190506040810181811067ffffffffffffffff82111715610ed957610ed8610e9b565b5b806040525090565b6000604051905060a0810181811067ffffffffffffffff82111715610f0957610f08610e9b565b5b806040525090565b60006040519050601f19601f830116810181811067ffffffffffffffff82111715610f3f57610f3e610e9b565b5b8060405250919050565b600082601f830112610f5a57600080fd5b813567ffffffffffffffff811115610f7557610f74610e9b565b5b610f886020601f19601f84011601610f11565b818152846020838601011115610f9d57600080fd5b81602085016020830137600060208383010152809250505092915050565b60018060a01b0381168114610fcf57600080fd5b50565b600081359050610fe181610fbb565b919050565b600082601f830112610ff757600080fd5b8135602067ffffffffffffffff82111561101457611013610e9b565b5b611022818360051b01610f11565b808382528282019150828460061b87010193508684111561104257600080fd5b8286015b84811015611092576040818903121561105f5760008081fd5b611067610eb1565b813561107281610fbb565b808252508482013585820152808452508383019250604081019050611046565b508094505050505092915050565b600080604083850312156110b357600080fd5b6110bc83610e7a565b9150602083013567ffffffffffffffff808211156110d957600080fd5b818501915060a082870312156110ee57600080fd5b6110f6610ee1565b82358281111561110557600080fd5b61111188828601610f49565b82525060208301358281111561112657600080fd5b61113288828601610f49565b60208301525060408301358281111561114a57600080fd5b61115688828601610fe6565b60408301525061116860608401610fd2565b606082015260808301358281111561117f57600080fd5b61118b88828601610f49565b6080830152508093505050509250929050565b600060208201905082825292915050565b600060a082840312156111c157600080fd5b6111c9610ee1565b9050813581526111db60208301610e7a565b6020820152604082013567ffffffffffffffff808211156111fb57600080fd5b61120785838601610f49565b6040840152606084013591508082111561122057600080fd5b61122c85838601610f49565b6060840152608084013591508082111561124557600080fd5b5061125284828501610fe6565b60808301525092915050565b60006020828403121561127057600080fd5b813567ffffffffffffffff81111561128757600080fd5b611293848285016111af565b91505092915050565b6000602082019050821515825292915050565b600060208201905082825292915050565b600080604083850312156112d357600080fd5b82356112de81610fbb565b80925050602083013567ffffffffffffffff8111156112fc57600080fd5b611308858286016111af565b9150509250929050565b60006020828403121561132457600080fd5b61132d82610e7a565b905092915050565b6000806040838503121561134857600080fd5b823561135381610fbb565b80925050602083013590509250929050565b60006020808301818452808551808352604086019150838701925060005b818110156113ac5760018060a01b03845116835284830192508484019350600181019050611383565b505080935050505092915050565b60208152601160208201527f556e737570706f7274656420636861696e00000000000000000000000000000060408201526000606082019050919050565b60208152601660208201527f496e76616c696420636861696e2073656c6563746f720000000000000000000060408201526000606082019050919050565b6000806040838503121561144957600080fd5b825161145481610fbb565b80925050602083015190509250929050565b60208152601160208201527f496e76616c696420726563697069656e7400000000000000000000000000000060408201526000606082019050919050565b60208152600f60208201527f496e76616c6964206d657373616765000000000000000000000000000000000060408201526000606082019050919050565b6000815180845260005b8181101561150e576020808286010151818388010152506020810190506114ec565b506000602082860101526020601f19601f83011685010191505092915050565b67ffffffffffffffff8316815260406020820152600061155160408301846114e2565b90509392505050565b600081518084526020808501945080840160005b838110156115a357815160018060a01b038151168852838101518489015250604087019650828201915060018101905061156e565b5050505082905092915050565b60a0815260006115c360a08301886114e2565b82810360208401526115d581886114e2565b905082810360408401526115e9818761155a565b905082810360608401526115fd81866114e2565b91505060018060a01b03831660808301529695505050505050565b60208152601460208201527f496e76616c696420736f7572636520636861696e00000000000000000000000060408201526000606082019050919050565b60208152601660208201527f496e76616c69642074617267657420616464726573730000000000000000000060408201526000606082019050919050565b60208152601960208201527f4d6573736167652076616c69646174696f6e206661696c65640000000000000060408201526000606082019050919050565b602081528151602082015267ffffffffffffffff60208301511660408201526000604083015160a0606084015261170c60c08401826114e2565b90506060840151601f198085840301608086015261172a83836114e2565b925060808601519150808584030160a086015250611748828261155a565b9250505092915050565b600060208201905060018060a01b038316825292915050565b67ffffffffffffffff83168152604060208201526000825160a0604084015261179760e08401826114e2565b90506020840151603f19808584030160608601526117b583836114e2565b925060408601519150808584030160808601526117d2838361155a565b925060018060a01b0360608701511660a086015260808601519150808584030160c08601525061180282826114e2565b925050509392505050565b60006020828403121561181f57600080fd5b815190509291505056fea2646970667358221220b66b4e0ac8dc94de5616735e280c479ac122f9157415f804b53b9beeeb76395e64736f6c63430008130033";

type MockRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouter__factory extends ContractFactory {
  constructor(...args: MockRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouter> {
    return super.deploy(overrides || {}) as Promise<MockRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRouter {
    return super.attach(address) as MockRouter;
  }
  override connect(signer: Signer): MockRouter__factory {
    return super.connect(signer) as MockRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterInterface {
    return new utils.Interface(_abi) as MockRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouter {
    return new Contract(address, _abi, signerOrProvider) as MockRouter;
  }
}
